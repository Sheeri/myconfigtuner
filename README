mysqltuner.py (Python)
======================

A Python port of the legacy `mysqltuner.pl` (v2.0.x) - https://launchpad.net/mysqltuner. It evaluates expressions from a config file against MySQL variables and status, and optionally prints recommendations.

# Requirements
python3 -m venv path/to/venv
source path/to/venv/bin/activate
python3 -m pip install xyz


- Python 3.8+
- Recommended libraries:
  - `mysql-connector-python` (official Oracle driver) — used by default in this script
    - Install: `pip install mysql-connector-python`
  - Alternatives (supported if you modify the code accordingly):
    - `PyMySQL` — `pip install PyMySQL`
    - `mysqlclient` (C extension) — `pip install mysqlclient`

# Files used
- `mysqltuner.py`: Script entry point.
- Your tuning config file (not included), e.g. `tuner-default.cnf`.

## Config file format
The config file must contain one rule per line using the following format:

```
<label> ||| <comparison> ||| <expression> ||| <recommendation>
```

Notes:
- Lines starting with `#` are ignored.
- `<expression>` is evaluated in Python. Some helpers are available: `hr_bytes`, `hr_num`, `hr_bytime`, `pretty_uptime`.
- Variables from MySQL `SHOW GLOBAL VARIABLES` and `SHOW GLOBAL STATUS` are available by their names. The script substitutes identifiers that match variable names with their values before evaluating the expression.

Example config line:

```
Connections ||| > 100 ||| Threads_connected ||| Consider lowering max_connections or investigating connection spikes.\n
```

# Usage

```
python3 mysqltuner.py --config tuner-default.cnf [--recommend] [--output pretty|csv] \
  [--host HOST --port 3306 --user USER --pass PASS | --socket /path/to/socket] \
  [--filelist file1.txt,file2.txt] [--forcemem MB --forceswap MB --forcearch 32|64]
```

## Examples

- Connect to local server using default client credentials (e.g., ~/.my.cnf or socket auth):
```
python3 mysqltuner.py --config tuner-default.cnf --recommend
```

- Connect to remote server explicitly:
```
python3 mysqltuner.py --config tuner-default.cnf --host 10.1.2.3 --port 3306 --user root --pass secret --recommend
```

- Offline analysis from files (lines of `key value`):
vars.txt is a file created by running `mysql -e "show variables;"`
status.txt is a file created by running `mysql -e "show status;"`

```
python3 mysqltuner.py --config tuner-default.cnf --filelist vars.txt,status.txt --forcemem 16384 --forceswap 8192 --forcearch 64
```

### Behavior differences from Perl version

- Expressions are evaluated in Python, not Perl.
- The script avoids shelling out to `mysql`/`mysqladmin`; it uses a Python driver for portability.
- Safer evaluation sandbox: only a small set of functions are exposed in expressions.

### Development

- Lint: `ruff` or `flake8` (optional).
- Testing: run the script against a dev MySQL instance or offline files.

# License

This software is licensed under the Mozilla Public License (MPL).

Added files and impact:
- mysqltuner.py: Functional Python port that connects to MySQL or parses offline inputs, evaluates config rules, prints results and optional recommendations.
- README.md: Usage, config format, and recommended libraries.
- requirements.txt: Pins mysql-connector-python
